(* Question 1: Manhattan Distance *)
(* TODO: Write a good set of tests for distance. *)
let distance_tests = [
  (
    ((0, 0), (0, 0)), (* input: two inputs, each a pair, so we have a pair of 
                      pairs *)
    0                 (* output: the distance between (0,0) and (0,0) is 0 *)
  );                    (* end each case with a semicolon *)
    (* Your test cases go here *)
  (
    ((2, 3), (5, 9)),
    9
  );
  
  (
    ((5, 9), (2, 3)),
    9
  );
  
  (
    ((5, 9), (5, 9)),
    0
  );
  
  (
    ((-1, 0), (2, -3)),
    6
  );
]
;;

(* TODO: Correct this implementation so that it compiles and returns
         the correct answers.
*)
let distance (x1, y1) (x2, y2) = 
  abs (x1 - x2) + abs (y1 - y2) 



(* Question 2: Binomial *)
(* TODO: Write your own tests for the binomial function.
         See the provided test for how to write test cases.
         Remember that we assume that  n >= k >= 0; you should not write test 
           cases where this assumption is violated.
*)


let binomial_tests = [
  (* Your test cases go here. Correct this incorrect test case for the function. *)
  ((1, 1), 1); ((2, 1), 2); ((4, 2), 6); ((4, 3), 4); ((4, 4), 1); ((5, 3), 10);
  ((5, 2), 10)
  
]

(* TODO: Correct this implementation so that it compiles and returns
         the correct answers.
*)
let binomial n k =
  let rec factorial (x : int) (acc : int) : int = 
    if x = 0 then acc else factorial (x - 1) (x * acc)
  in 
  (factorial n 1) / ((factorial k 1) * (factorial (n - k) 1))


(* Question 3: Lucas Numbers *)

(* TODO: Write a good set of tests for lucas_tests. *)
let lucas_tests = [
  (0, 2); (1, 1); (2, 3); (6, 18); (7, 29); (11, 199); (14, 843);
] 

(* TODO: Implement a tail-recursive helper lucas_helper. *)
let rec lucas_helper (nMinusTwo : int) (nMinusOne : int) (n : int) =
  if n == 0 then nMinusTwo else 
  if n == 1 then nMinusOne else 
    lucas_helper (nMinusOne) (nMinusTwo + nMinusOne) (n - 1)


(* TODO: Implement lucas by calling lucas_helper. *)
let lucas n =
  lucas_helper 2 1 n
